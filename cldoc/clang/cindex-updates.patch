diff --git b/cldoc/clang/cindex.py a/cldoc/clang/cindex.py
index edd3e70..cecf935 100644
--- b/cldoc/clang/cindex.py
+++ a/cldoc/clang/cindex.py
@@ -1,3 +1,15 @@
+# This file is part of cldoc.  cldoc is free software: you can
+# redistribute it and/or modify it under the terms of the GNU General Public
+# License as published by the Free Software Foundation, version 2.
+#
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
+#
+# You should have received a copy of the GNU General Public License along with
+# this program; if not, write to the Free Software Foundation, Inc., 51
+# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #===- cindex.py - Python Indexing Library Bindings -----------*- python -*--===#
 #
 #                     The LLVM Compiler Infrastructure
@@ -65,7 +77,7 @@ call is efficient.
 from ctypes import *
 import collections
 
-import clang.enumerations
+from . import enumerations
 
 # ctypes doesn't implicitly convert c_void_p to the appropriate wrapper
 # object. This is a problem, because it means that from_parameter will see an
@@ -352,6 +364,13 @@ class Diagnostic(object):
         return conf.lib.clang_getDiagnosticOption(self, None)
 
     @property
+    def format(self, options=-1):
+        if options == -1:
+            options = conf.lib.clang_defaultDiagnosticDisplayOptions()
+
+        return conf.lib.clang_formatDiagnostic(self, options)
+
+    @property
     def disable_option(self):
         """The command-line option that disables this diagnostic."""
         disable = _CXString()
@@ -1073,6 +1092,12 @@ class Cursor(Structure):
         """
         return conf.lib.clang_CXXMethod_isStatic(self)
 
+    def is_virtual_method(self):
+        """Returns True if the cursor refers to a C++ member function or member
+        function template that is declared 'virtual'.
+        """
+        return conf.lib.clang_CXXMethod_isVirtual(self)
+
     def get_definition(self):
         """
         If the cursor is a reference to a declaration or a declaration of
@@ -1083,6 +1108,13 @@ class Cursor(Structure):
         # declaration prior to issuing the lookup.
         return conf.lib.clang_getCursorDefinition(self)
 
+    @property
+    def access_specifier(self):
+        if self.kind == CursorKind.CXX_BASE_SPECIFIER or self.kind == CursorKind.CXX_ACCESS_SPEC_DECL:
+            return CXXAccessSpecifier.from_value(conf.lib.clang_getCXXAccessSpecifier(self))
+        else:
+            return None
+
     def get_usr(self):
         """Return the Unified Symbol Resultion (USR) for the entity referenced
         by the given cursor (or None).
@@ -1248,6 +1280,9 @@ class Cursor(Structure):
 
         return self._hash
 
+    def __hash__(self):
+        return self.hash
+
     @property
     def semantic_parent(self):
         """Return the semantic parent for this cursor."""
@@ -1421,6 +1456,10 @@ TypeKind.FUNCTIONNOPROTO = TypeKind(110)
 TypeKind.FUNCTIONPROTO = TypeKind(111)
 TypeKind.CONSTANTARRAY = TypeKind(112)
 TypeKind.VECTOR = TypeKind(113)
+TypeKind.INCOMPLETEARRAY = TypeKind(114)
+TypeKind.VARIABLEARRAY = TypeKind(115)
+TypeKind.DEPENDENTSIZEDARRAY = TypeKind(116)
+TypeKind.MEMBERPOINTER = TypeKind(117)
 
 class Type(Structure):
     """
@@ -1849,6 +1888,33 @@ class Index(ClangObject):
         return TranslationUnit.from_source(path, args, unsaved_files, options,
                                            self)
 
+class CXXAccessSpecifier:
+    INVALID_ACCESS = 0
+    PUBLIC = 1
+    PROTECTED = 2
+    PRIVATE = 3
+
+    def __init__(self, value, name):
+        self.value = value
+        self.name = name
+
+    def __str__(self):
+        return 'CXXAccessSpecifier.' + self.name
+
+    @staticmethod
+    def from_value(val):
+        for item in dir(CXXAccessSpecifier):
+           if item.isupper() and getattr(CXXAccessSpecifier, item) == val:
+               return CXXAccessSpecifier(val, item)
+
+        return None
+
+    def __cmp__(self, other):
+        return cmp(int(self), int(other))
+
+    def __int__(self):
+        return self.value
+
 class TranslationUnit(ClangObject):
     """Represents a source code translation unit.
 
@@ -2445,44 +2511,6 @@ functionList = [
   ("clang_annotateTokens",
    [TranslationUnit, POINTER(Token), c_uint, POINTER(Cursor)]),
 
-  ("clang_CompilationDatabase_dispose",
-   [c_object_p]),
-
-  ("clang_CompilationDatabase_fromDirectory",
-   [c_char_p, POINTER(c_uint)],
-   c_object_p,
-   CompilationDatabase.from_result),
-
-  ("clang_CompilationDatabase_getCompileCommands",
-   [c_object_p, c_char_p],
-   c_object_p,
-   CompileCommands.from_result),
-
-  ("clang_CompileCommands_dispose",
-   [c_object_p]),
-
-  ("clang_CompileCommands_getCommand",
-   [c_object_p, c_uint],
-   c_object_p),
-
-  ("clang_CompileCommands_getSize",
-   [c_object_p],
-   c_uint),
-
-  ("clang_CompileCommand_getArg",
-   [c_object_p, c_uint],
-   _CXString,
-   _CXString.from_result),
-
-  ("clang_CompileCommand_getDirectory",
-   [c_object_p],
-   _CXString,
-   _CXString.from_result),
-
-  ("clang_CompileCommand_getNumArgs",
-   [c_object_p],
-   c_uint),
-
   ("clang_codeCompleteAt",
    [TranslationUnit, c_char_p, c_int, c_int, c_void_p, c_int, c_int],
    POINTER(CCRStructure)),
@@ -2524,6 +2552,15 @@ functionList = [
   ("clang_disposeDiagnostic",
    [Diagnostic]),
 
+  ("clang_defaultDiagnosticDisplayOptions",
+   [],
+   c_uint),
+
+  ("clang_formatDiagnostic",
+   [Diagnostic, c_uint],
+   _CXString,
+   _CXString.from_result),
+
   ("clang_disposeIndex",
    [Index]),
 
@@ -2580,10 +2617,6 @@ functionList = [
    [c_void_p],
    c_int),
 
-  ("clang_getCompletionBriefComment",
-   [c_void_p],
-   _CXString),
-
   ("clang_getCompletionChunkCompletionString",
    [c_void_p, c_int],
    c_object_p),
@@ -3036,7 +3069,7 @@ class Config:
             raise Exception("library file must be set before before using " \
                             "any other functionalities in libclang.")
 
-        Config.library_file = path
+        Config.library_file = file
 
     @staticmethod
     def set_compatibility_check(check_status):
@@ -3108,7 +3141,7 @@ class Config:
         return True
 
 def register_enumerations():
-    for name, value in clang.enumerations.TokenKinds:
+    for name, value in enumerations.TokenKinds:
         TokenKind.register(value, name)
 
 conf = Config()
